package com.sample.java8;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class LambdaPlayground {
	static int[] intArray = IntStream.rangeClosed(0, 50).toArray();
	static List<Integer> intStringArray = IntStream.range(0, 50)
		    						.boxed().collect(Collectors.toList());

	public static void main(String[] args) {
		run_Filter();
		run_Map();
		run_Reduce();
	}
	
	private static void run_Filter() {
		System.out.println("################ Filter Example Started ###############");
		
		intStringArray.stream()
			.filter(num -> num % 2 == 0)
			.forEach(System.out::println);
		
		System.out.println("################ Filter Example Ended ###############");
		System.out.println();

	}
	
	private static void run_Map() {
		System.out.println("################ Map Example Started ###############");
		
		intStringArray.stream()
			.map(num -> num * 2)
			.forEach(System.out::println);
		
		System.out.println("################ Map Example Ended ###############");
		System.out.println();

	}

	private static void run_Reduce() {
		System.out.println("################ Reduce Example Started ###############");
		
		// Finding sum of all elements 
		int sum = intStringArray.stream()
					.reduce(0, (num1, num2) -> num1 + num2);
		System.out.println(sum);
		
		
        // To get the product of all elements 
        // in given range excluding the 
        // rightmost element 
        int product = intStringArray.stream()
                     .reduce((num1, num2) -> num1 * num2) 
                     .orElse(-1); 
  
        System.out.println("The product is : " + product); 

		System.out.println("################ Reduce Example Ended ###############");
		System.out.println();

	}

}
